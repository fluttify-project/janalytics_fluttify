//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "JanalyticsFluttifyPlugin.h"

typedef void (^Handler)(NSObject <FlutterPluginRegistrar> *, NSDictionary<NSString *, NSObject *> *, FlutterResult);

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation JanalyticsFluttifyPlugin {
  NSObject <FlutterPluginRegistrar> * _registrar;
  NSDictionary<NSString *, Handler> *_handlerMap;
}

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
    // 处理方法们
    _handlerMap = @{
      @"JANALYTICSService::setupWithConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          JANALYTICSLaunchConfig* config = (JANALYTICSLaunchConfig*) HEAP[@([args[@"config"] integerValue])];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: JANALYTICSService::setupWithConfig(暂未实现参数打印)");
          }
      
          // invoke native method
          [JANALYTICSService setupWithConfig: config];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"JANALYTICSService::startLogPageView": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* pageName = (NSString*) args[@"pageName"];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: JANALYTICSService::startLogPageView(暂未实现参数打印)");
          }
      
          // invoke native method
          [JANALYTICSService startLogPageView: pageName];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"JANALYTICSService::stopLogPageView": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* pageName = (NSString*) args[@"pageName"];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: JANALYTICSService::stopLogPageView(暂未实现参数打印)");
          }
      
          // invoke native method
          [JANALYTICSService stopLogPageView: pageName];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"JANALYTICSService::setLatitudeLongitude": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          double latitude = [args[@"latitude"] doubleValue];
          // jsonable arg
          double longitude = [args[@"longitude"] doubleValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: JANALYTICSService::setLatitude(暂未实现参数打印)");
          }
      
          // invoke native method
          [JANALYTICSService setLatitude: latitude longitude: longitude];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"JANALYTICSService::setLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          CLLocation* location = (CLLocation*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: JANALYTICSService::setLocation(暂未实现参数打印)");
          }
      
          // invoke native method
          [JANALYTICSService setLocation: location];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"JANALYTICSService::eventRecord": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          JANALYTICSEventObject* event = (JANALYTICSEventObject*) HEAP[@([args[@"event"] integerValue])];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: JANALYTICSService::eventRecord(暂未实现参数打印)");
          }
      
          // invoke native method
          [JANALYTICSService eventRecord: event];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"JANALYTICSService::identifyAccountWith": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          JANALYTICSUserInfo* userInfo = (JANALYTICSUserInfo*) HEAP[@([args[@"userInfo"] integerValue])];
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: JANALYTICSService::identifyAccount(暂未实现参数打印)");
          }
      
          // invoke native method
          [JANALYTICSService identifyAccount: userInfo with: ^(NSInteger err, NSString* msg) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"JANALYTICSService::identifyAccountWith::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // primitive callback arg
              NSNumber* argerr = @(err);
              // jsonable callback arg
              NSString* argmsg = msg;
      
              [channel invokeMethod:@"Callback::void|NSInteger err, NSString msg::void|NSInteger err, NSString msg" arguments:@{@"err": argerr, @"msg": argmsg}];
      
          }];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"JANALYTICSService::detachAccount": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: JANALYTICSService::detachAccount(暂未实现参数打印)");
          }
      
          // invoke native method
          [JANALYTICSService detachAccount: ^(NSInteger err, NSString* msg) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"JANALYTICSService::detachAccount::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // primitive callback arg
              NSNumber* argerr = @(err);
              // jsonable callback arg
              NSString* argmsg = msg;
      
              [channel invokeMethod:@"Callback::void|NSInteger err, NSString msg::void|NSInteger err, NSString msg" arguments:@{@"err": argerr, @"msg": argmsg}];
      
          }];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"JANALYTICSService::setFrequency": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSUInteger frequency = [args[@"frequency"] unsignedIntegerValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: JANALYTICSService::setFrequency(暂未实现参数打印)");
          }
      
          // invoke native method
          [JANALYTICSService setFrequency: frequency];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"JANALYTICSService::crashLogON": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: JANALYTICSService::crashLogON(暂未实现参数打印)");
          }
      
          // invoke native method
          [JANALYTICSService crashLogON];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"JANALYTICSService::setDebug": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL enable = [args[@"enable"] boolValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: JANALYTICSService::setDebug(暂未实现参数打印)");
          }
      
          // invoke native method
          [JANALYTICSService setDebug: enable];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"JANALYTICSLaunchConfig::get_appKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSLaunchConfig::get_appKey");
          }
      
          // ref object
          JANALYTICSLaunchConfig* ref = (JANALYTICSLaunchConfig*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.appKey;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSLaunchConfig::get_channel": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSLaunchConfig::get_channel");
          }
      
          // ref object
          JANALYTICSLaunchConfig* ref = (JANALYTICSLaunchConfig*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.channel;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSLaunchConfig::get_advertisingId": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSLaunchConfig::get_advertisingId");
          }
      
          // ref object
          JANALYTICSLaunchConfig* ref = (JANALYTICSLaunchConfig*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.advertisingId;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSLaunchConfig::get_isProduction": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSLaunchConfig::get_isProduction");
          }
      
          // ref object
          JANALYTICSLaunchConfig* ref = (JANALYTICSLaunchConfig*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          BOOL result = ref.isProduction;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"JANALYTICSLoginEvent::get_method": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSLoginEvent::get_method");
          }
      
          // ref object
          JANALYTICSLoginEvent* ref = (JANALYTICSLoginEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.method;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSLoginEvent::get_success": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSLoginEvent::get_success");
          }
      
          // ref object
          JANALYTICSLoginEvent* ref = (JANALYTICSLoginEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          BOOL result = ref.success;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"JANALYTICSRegisterEvent::get_method": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSRegisterEvent::get_method");
          }
      
          // ref object
          JANALYTICSRegisterEvent* ref = (JANALYTICSRegisterEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.method;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSRegisterEvent::get_success": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSRegisterEvent::get_success");
          }
      
          // ref object
          JANALYTICSRegisterEvent* ref = (JANALYTICSRegisterEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          BOOL result = ref.success;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"JANALYTICSPurchaseEvent::get_price": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSPurchaseEvent::get_price");
          }
      
          // ref object
          JANALYTICSPurchaseEvent* ref = (JANALYTICSPurchaseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          CGFloat result = ref.price;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"JANALYTICSPurchaseEvent::get_success": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSPurchaseEvent::get_success");
          }
      
          // ref object
          JANALYTICSPurchaseEvent* ref = (JANALYTICSPurchaseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          BOOL result = ref.success;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"JANALYTICSPurchaseEvent::get_goodsID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSPurchaseEvent::get_goodsID");
          }
      
          // ref object
          JANALYTICSPurchaseEvent* ref = (JANALYTICSPurchaseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.goodsID;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSPurchaseEvent::get_goodsName": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSPurchaseEvent::get_goodsName");
          }
      
          // ref object
          JANALYTICSPurchaseEvent* ref = (JANALYTICSPurchaseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.goodsName;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSPurchaseEvent::get_goodsType": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSPurchaseEvent::get_goodsType");
          }
      
          // ref object
          JANALYTICSPurchaseEvent* ref = (JANALYTICSPurchaseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.goodsType;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSPurchaseEvent::get_currency": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSPurchaseEvent::get_currency");
          }
      
          // ref object
          JANALYTICSPurchaseEvent* ref = (JANALYTICSPurchaseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          JANALYTICSPurchaseCurrency result = ref.currency;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"JANALYTICSPurchaseEvent::get_quantity": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSPurchaseEvent::get_quantity");
          }
      
          // ref object
          JANALYTICSPurchaseEvent* ref = (JANALYTICSPurchaseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSInteger result = ref.quantity;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"JANALYTICSBrowseEvent::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSBrowseEvent::get_name");
          }
      
          // ref object
          JANALYTICSBrowseEvent* ref = (JANALYTICSBrowseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.name;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSBrowseEvent::get_contentID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSBrowseEvent::get_contentID");
          }
      
          // ref object
          JANALYTICSBrowseEvent* ref = (JANALYTICSBrowseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.contentID;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSBrowseEvent::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSBrowseEvent::get_type");
          }
      
          // ref object
          JANALYTICSBrowseEvent* ref = (JANALYTICSBrowseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.type;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSBrowseEvent::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSBrowseEvent::get_duration");
          }
      
          // ref object
          JANALYTICSBrowseEvent* ref = (JANALYTICSBrowseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          CGFloat result = ref.duration;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"JANALYTICSCountEvent::get_eventID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSCountEvent::get_eventID");
          }
      
          // ref object
          JANALYTICSCountEvent* ref = (JANALYTICSCountEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.eventID;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSCalculateEvent::get_eventID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSCalculateEvent::get_eventID");
          }
      
          // ref object
          JANALYTICSCalculateEvent* ref = (JANALYTICSCalculateEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.eventID;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSCalculateEvent::get_value": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSCalculateEvent::get_value");
          }
      
          // ref object
          JANALYTICSCalculateEvent* ref = (JANALYTICSCalculateEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          CGFloat result = ref.value;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"JANALYTICSUserInfo::get_accountID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::get_accountID");
          }
      
          // ref object
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.accountID;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSUserInfo::get_sex": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::get_sex");
          }
      
          // ref object
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          JANALYTICSSex result = ref.sex;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"JANALYTICSUserInfo::get_birthdate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::get_birthdate");
          }
      
          // ref object
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.birthdate;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSUserInfo::get_paid": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::get_paid");
          }
      
          // ref object
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          JANALYTICSPaid result = ref.paid;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"JANALYTICSUserInfo::get_phone": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::get_phone");
          }
      
          // ref object
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.phone;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSUserInfo::get_email": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::get_email");
          }
      
          // ref object
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.email;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSUserInfo::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::get_name");
          }
      
          // ref object
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.name;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSUserInfo::get_wechatID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::get_wechatID");
          }
      
          // ref object
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.wechatID;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSUserInfo::get_qqID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::get_qqID");
          }
      
          // ref object
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.qqID;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSUserInfo::get_weiboID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::get_weiboID");
          }
      
          // ref object
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.weiboID;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"JANALYTICSLaunchConfig::set_appKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSLaunchConfig::set_appKey");
          }
      
          // args
          // jsonable arg
          NSString* appKey = (NSString*) args[@"appKey"];
      
          // ref
          JANALYTICSLaunchConfig* ref = (JANALYTICSLaunchConfig*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.appKey = appKey;
          methodResult(@"success");
      },
      
      @"JANALYTICSLaunchConfig::set_channel": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSLaunchConfig::set_channel");
          }
      
          // args
          // jsonable arg
          NSString* channel = (NSString*) args[@"channel"];
      
          // ref
          JANALYTICSLaunchConfig* ref = (JANALYTICSLaunchConfig*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.channel = channel;
          methodResult(@"success");
      },
      
      @"JANALYTICSLaunchConfig::set_advertisingId": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSLaunchConfig::set_advertisingId");
          }
      
          // args
          // jsonable arg
          NSString* advertisingId = (NSString*) args[@"advertisingId"];
      
          // ref
          JANALYTICSLaunchConfig* ref = (JANALYTICSLaunchConfig*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.advertisingId = advertisingId;
          methodResult(@"success");
      },
      
      @"JANALYTICSLaunchConfig::set_isProduction": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSLaunchConfig::set_isProduction");
          }
      
          // args
          // jsonable arg
          BOOL isProduction = [args[@"isProduction"] boolValue];
      
          // ref
          JANALYTICSLaunchConfig* ref = (JANALYTICSLaunchConfig*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.isProduction = isProduction;
          methodResult(@"success");
      },
      
      @"JANALYTICSLoginEvent::set_method": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSLoginEvent::set_method");
          }
      
          // args
          // jsonable arg
          NSString* method = (NSString*) args[@"method"];
      
          // ref
          JANALYTICSLoginEvent* ref = (JANALYTICSLoginEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.method = method;
          methodResult(@"success");
      },
      
      @"JANALYTICSLoginEvent::set_success": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSLoginEvent::set_success");
          }
      
          // args
          // jsonable arg
          BOOL success = [args[@"success"] boolValue];
      
          // ref
          JANALYTICSLoginEvent* ref = (JANALYTICSLoginEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.success = success;
          methodResult(@"success");
      },
      
      @"JANALYTICSRegisterEvent::set_method": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSRegisterEvent::set_method");
          }
      
          // args
          // jsonable arg
          NSString* method = (NSString*) args[@"method"];
      
          // ref
          JANALYTICSRegisterEvent* ref = (JANALYTICSRegisterEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.method = method;
          methodResult(@"success");
      },
      
      @"JANALYTICSRegisterEvent::set_success": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSRegisterEvent::set_success");
          }
      
          // args
          // jsonable arg
          BOOL success = [args[@"success"] boolValue];
      
          // ref
          JANALYTICSRegisterEvent* ref = (JANALYTICSRegisterEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.success = success;
          methodResult(@"success");
      },
      
      @"JANALYTICSPurchaseEvent::set_price": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSPurchaseEvent::set_price");
          }
      
          // args
          // jsonable arg
          CGFloat price = [args[@"price"] floatValue];
      
          // ref
          JANALYTICSPurchaseEvent* ref = (JANALYTICSPurchaseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.price = price;
          methodResult(@"success");
      },
      
      @"JANALYTICSPurchaseEvent::set_success": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSPurchaseEvent::set_success");
          }
      
          // args
          // jsonable arg
          BOOL success = [args[@"success"] boolValue];
      
          // ref
          JANALYTICSPurchaseEvent* ref = (JANALYTICSPurchaseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.success = success;
          methodResult(@"success");
      },
      
      @"JANALYTICSPurchaseEvent::set_goodsID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSPurchaseEvent::set_goodsID");
          }
      
          // args
          // jsonable arg
          NSString* goodsID = (NSString*) args[@"goodsID"];
      
          // ref
          JANALYTICSPurchaseEvent* ref = (JANALYTICSPurchaseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.goodsID = goodsID;
          methodResult(@"success");
      },
      
      @"JANALYTICSPurchaseEvent::set_goodsName": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSPurchaseEvent::set_goodsName");
          }
      
          // args
          // jsonable arg
          NSString* goodsName = (NSString*) args[@"goodsName"];
      
          // ref
          JANALYTICSPurchaseEvent* ref = (JANALYTICSPurchaseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.goodsName = goodsName;
          methodResult(@"success");
      },
      
      @"JANALYTICSPurchaseEvent::set_goodsType": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSPurchaseEvent::set_goodsType");
          }
      
          // args
          // jsonable arg
          NSString* goodsType = (NSString*) args[@"goodsType"];
      
          // ref
          JANALYTICSPurchaseEvent* ref = (JANALYTICSPurchaseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.goodsType = goodsType;
          methodResult(@"success");
      },
      
      @"JANALYTICSPurchaseEvent::set_currency": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSPurchaseEvent::set_currency");
          }
      
          // args
          // enum arg
          JANALYTICSPurchaseCurrency currency = (JANALYTICSPurchaseCurrency) [args[@"currency"] integerValue];
      
          // ref
          JANALYTICSPurchaseEvent* ref = (JANALYTICSPurchaseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.currency = currency;
          methodResult(@"success");
      },
      
      @"JANALYTICSPurchaseEvent::set_quantity": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSPurchaseEvent::set_quantity");
          }
      
          // args
          // jsonable arg
          NSInteger quantity = [args[@"quantity"] integerValue];
      
          // ref
          JANALYTICSPurchaseEvent* ref = (JANALYTICSPurchaseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.quantity = quantity;
          methodResult(@"success");
      },
      
      @"JANALYTICSBrowseEvent::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSBrowseEvent::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          JANALYTICSBrowseEvent* ref = (JANALYTICSBrowseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"JANALYTICSBrowseEvent::set_contentID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSBrowseEvent::set_contentID");
          }
      
          // args
          // jsonable arg
          NSString* contentID = (NSString*) args[@"contentID"];
      
          // ref
          JANALYTICSBrowseEvent* ref = (JANALYTICSBrowseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.contentID = contentID;
          methodResult(@"success");
      },
      
      @"JANALYTICSBrowseEvent::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSBrowseEvent::set_type");
          }
      
          // args
          // jsonable arg
          NSString* type = (NSString*) args[@"type"];
      
          // ref
          JANALYTICSBrowseEvent* ref = (JANALYTICSBrowseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.type = type;
          methodResult(@"success");
      },
      
      @"JANALYTICSBrowseEvent::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSBrowseEvent::set_duration");
          }
      
          // args
          // jsonable arg
          CGFloat duration = [args[@"duration"] floatValue];
      
          // ref
          JANALYTICSBrowseEvent* ref = (JANALYTICSBrowseEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.duration = duration;
          methodResult(@"success");
      },
      
      @"JANALYTICSCountEvent::set_eventID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSCountEvent::set_eventID");
          }
      
          // args
          // jsonable arg
          NSString* eventID = (NSString*) args[@"eventID"];
      
          // ref
          JANALYTICSCountEvent* ref = (JANALYTICSCountEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.eventID = eventID;
          methodResult(@"success");
      },
      
      @"JANALYTICSCalculateEvent::set_eventID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSCalculateEvent::set_eventID");
          }
      
          // args
          // jsonable arg
          NSString* eventID = (NSString*) args[@"eventID"];
      
          // ref
          JANALYTICSCalculateEvent* ref = (JANALYTICSCalculateEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.eventID = eventID;
          methodResult(@"success");
      },
      
      @"JANALYTICSCalculateEvent::set_value": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSCalculateEvent::set_value");
          }
      
          // args
          // jsonable arg
          CGFloat value = [args[@"value"] floatValue];
      
          // ref
          JANALYTICSCalculateEvent* ref = (JANALYTICSCalculateEvent*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.value = value;
          methodResult(@"success");
      },
      
      @"JANALYTICSUserInfo::set_accountID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::set_accountID");
          }
      
          // args
          // jsonable arg
          NSString* accountID = (NSString*) args[@"accountID"];
      
          // ref
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.accountID = accountID;
          methodResult(@"success");
      },
      
      @"JANALYTICSUserInfo::set_sex": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::set_sex");
          }
      
          // args
          // enum arg
          JANALYTICSSex sex = (JANALYTICSSex) [args[@"sex"] integerValue];
      
          // ref
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.sex = sex;
          methodResult(@"success");
      },
      
      @"JANALYTICSUserInfo::set_birthdate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::set_birthdate");
          }
      
          // args
          // jsonable arg
          NSString* birthdate = (NSString*) args[@"birthdate"];
      
          // ref
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.birthdate = birthdate;
          methodResult(@"success");
      },
      
      @"JANALYTICSUserInfo::set_paid": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::set_paid");
          }
      
          // args
          // enum arg
          JANALYTICSPaid paid = (JANALYTICSPaid) [args[@"paid"] integerValue];
      
          // ref
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.paid = paid;
          methodResult(@"success");
      },
      
      @"JANALYTICSUserInfo::set_phone": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::set_phone");
          }
      
          // args
          // jsonable arg
          NSString* phone = (NSString*) args[@"phone"];
      
          // ref
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.phone = phone;
          methodResult(@"success");
      },
      
      @"JANALYTICSUserInfo::set_email": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::set_email");
          }
      
          // args
          // jsonable arg
          NSString* email = (NSString*) args[@"email"];
      
          // ref
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.email = email;
          methodResult(@"success");
      },
      
      @"JANALYTICSUserInfo::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"JANALYTICSUserInfo::set_wechatID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::set_wechatID");
          }
      
          // args
          // jsonable arg
          NSString* wechatID = (NSString*) args[@"wechatID"];
      
          // ref
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.wechatID = wechatID;
          methodResult(@"success");
      },
      
      @"JANALYTICSUserInfo::set_qqID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::set_qqID");
          }
      
          // args
          // jsonable arg
          NSString* qqID = (NSString*) args[@"qqID"];
      
          // ref
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.qqID = qqID;
          methodResult(@"success");
      },
      
      @"JANALYTICSUserInfo::set_weiboID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"JANALYTICSUserInfo::set_weiboID");
          }
      
          // args
          // jsonable arg
          NSString* weiboID = (NSString*) args[@"weiboID"];
      
          // ref
          JANALYTICSUserInfo* ref = (JANALYTICSUserInfo*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.weiboID = weiboID;
          methodResult(@"success");
      },
      
      @"RefClass::isKindOfJANALYTICSLaunchConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[JANALYTICSLaunchConfig class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfJANALYTICSService": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[JANALYTICSService class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfJANALYTICSEventObject": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[JANALYTICSEventObject class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfJANALYTICSLoginEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[JANALYTICSLoginEvent class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfJANALYTICSRegisterEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[JANALYTICSRegisterEvent class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfJANALYTICSPurchaseEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[JANALYTICSPurchaseEvent class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfJANALYTICSBrowseEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[JANALYTICSBrowseEvent class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfJANALYTICSCountEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[JANALYTICSCountEvent class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfJANALYTICSCalculateEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[JANALYTICSCalculateEvent class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfJANALYTICSUserInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[JANALYTICSUserInfo class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::asJANALYTICSLaunchConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (JANALYTICSLaunchConfig *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asJANALYTICSService": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (JANALYTICSService *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asJANALYTICSEventObject": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (JANALYTICSEventObject *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asJANALYTICSLoginEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (JANALYTICSLoginEvent *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asJANALYTICSRegisterEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (JANALYTICSRegisterEvent *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asJANALYTICSPurchaseEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (JANALYTICSPurchaseEvent *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asJANALYTICSBrowseEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (JANALYTICSBrowseEvent *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asJANALYTICSCountEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (JANALYTICSCountEvent *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asJANALYTICSCalculateEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (JANALYTICSCalculateEvent *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asJANALYTICSUserInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (JANALYTICSUserInfo *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"ObjectFactory::createJANALYTICSLaunchConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createJANALYTICSLaunchConfig");
          }
      
          JANALYTICSLaunchConfig* ref = [[JANALYTICSLaunchConfig alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createJANALYTICSService": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createJANALYTICSService");
          }
      
          JANALYTICSService* ref = [[JANALYTICSService alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createJANALYTICSEventObject": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createJANALYTICSEventObject");
          }
      
          JANALYTICSEventObject* ref = [[JANALYTICSEventObject alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createJANALYTICSLoginEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createJANALYTICSLoginEvent");
          }
      
          JANALYTICSLoginEvent* ref = [[JANALYTICSLoginEvent alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createJANALYTICSRegisterEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createJANALYTICSRegisterEvent");
          }
      
          JANALYTICSRegisterEvent* ref = [[JANALYTICSRegisterEvent alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createJANALYTICSPurchaseEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createJANALYTICSPurchaseEvent");
          }
      
          JANALYTICSPurchaseEvent* ref = [[JANALYTICSPurchaseEvent alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createJANALYTICSBrowseEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createJANALYTICSBrowseEvent");
          }
      
          JANALYTICSBrowseEvent* ref = [[JANALYTICSBrowseEvent alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createJANALYTICSCountEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createJANALYTICSCountEvent");
          }
      
          JANALYTICSCountEvent* ref = [[JANALYTICSCountEvent alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createJANALYTICSCalculateEvent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createJANALYTICSCalculateEvent");
          }
      
          JANALYTICSCalculateEvent* ref = [[JANALYTICSCalculateEvent alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createJANALYTICSUserInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createJANALYTICSUserInfo");
          }
      
          JANALYTICSUserInfo* ref = [[JANALYTICSUserInfo alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
    };
  }

  return self;
}

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"me.yohom/janalytics_fluttify"
            binaryMessenger:[registrar messenger]];

  [registrar addMethodCallDelegate:[[JanalyticsFluttifyPlugin alloc] initWithFlutterPluginRegistrar:registrar]
                           channel:channel];

  // 注册View
  
}

// Method Handlers
- (void)handleMethodCall:(FlutterMethodCall *)methodCall result:(FlutterResult)methodResult {
  NSDictionary<NSString *, id> *args = (NSDictionary<NSString *, id> *) [methodCall arguments];

  if (_handlerMap[methodCall.method] != nil) {
    _handlerMap[methodCall.method](_registrar, args, methodResult);
  } else {
    methodResult(FlutterMethodNotImplemented);
  }
}

// 委托方法们


@end