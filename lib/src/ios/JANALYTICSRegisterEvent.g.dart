// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:janalytics_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class JANALYTICSRegisterEvent extends JANALYTICSEventObject  {
  //region constants
  static const String name__ = 'JANALYTICSRegisterEvent';

  
  //endregion

  //region creators
  static Future<JANALYTICSRegisterEvent> create__() async {
    final int refId = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('ObjectFactory::createJANALYTICSRegisterEvent');
    final object = JANALYTICSRegisterEvent()..refId = refId..tag__ = 'janalytics_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<JANALYTICSRegisterEvent>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('ObjectFactory::create_batchJANALYTICSRegisterEvent', {'length': length});
  
    final List<JANALYTICSRegisterEvent> typedResult = resultBatch.map((result) => JANALYTICSRegisterEvent()..refId = result..tag__ = 'janalytics_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_method() async {
    final __result__ = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSRegisterEvent::get_method", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_success() async {
    final __result__ = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSRegisterEvent::get_success", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_method(String method) async {
    await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSRegisterEvent::set_method', {'refId': refId, "method": method});
  
  
  }
  
  Future<void> set_success(bool success) async {
    await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSRegisterEvent::set_success', {'refId': refId, "success": success});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension JANALYTICSRegisterEvent_Batch on List<JANALYTICSRegisterEvent> {
  //region getters
  Future<List<String>> get_method_batch() async {
    final resultBatch = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSRegisterEvent::get_method_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_success_batch() async {
    final resultBatch = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSRegisterEvent::get_success_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_method_batch(List<String> method) async {
    await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSRegisterEvent::set_method_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "method": method[__i__]}]);
  
  
  }
  
  Future<void> set_success_batch(List<bool> success) async {
    await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSRegisterEvent::set_success_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "success": success[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}