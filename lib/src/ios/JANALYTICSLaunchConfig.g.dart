// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:janalytics_fluttify/src/ios/ios.export.g.dart';
import 'package:janalytics_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class JANALYTICSLaunchConfig extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<JANALYTICSLaunchConfig> create__() async {
    final int refId = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('ObjectFactory::createJANALYTICSLaunchConfig');
    final object = JANALYTICSLaunchConfig()..refId = refId..tag = 'janalytics_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<JANALYTICSLaunchConfig>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('ObjectFactory::create_batchJANALYTICSLaunchConfig', {'length': length});
  
    final List<JANALYTICSLaunchConfig> typedResult = resultBatch.map((result) => JANALYTICSLaunchConfig()..refId = result..tag = 'janalytics_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_appKey() async {
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSLaunchConfig::get_appKey", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_channel() async {
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSLaunchConfig::get_channel", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_advertisingId() async {
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSLaunchConfig::get_advertisingId", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_isProduction() async {
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSLaunchConfig::get_isProduction", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_appKey(String appKey) async {
    await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSLaunchConfig::set_appKey', {'refId': refId, "appKey": appKey});
  
  
  }
  
  Future<void> set_channel(String channel) async {
    await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSLaunchConfig::set_channel', {'refId': refId, "channel": channel});
  
  
  }
  
  Future<void> set_advertisingId(String advertisingId) async {
    await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSLaunchConfig::set_advertisingId', {'refId': refId, "advertisingId": advertisingId});
  
  
  }
  
  Future<void> set_isProduction(bool isProduction) async {
    await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSLaunchConfig::set_isProduction', {'refId': refId, "isProduction": isProduction});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension JANALYTICSLaunchConfig_Batch on List<JANALYTICSLaunchConfig> {
  //region getters
  Future<List<String>> get_appKey_batch() async {
    final resultBatch = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSLaunchConfig::get_appKey_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_channel_batch() async {
    final resultBatch = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSLaunchConfig::get_channel_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_advertisingId_batch() async {
    final resultBatch = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSLaunchConfig::get_advertisingId_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_isProduction_batch() async {
    final resultBatch = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSLaunchConfig::get_isProduction_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  //endregion

  //region methods
  
  //endregion
}