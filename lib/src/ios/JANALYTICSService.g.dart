// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:janalytics_fluttify/src/ios/ios.export.g.dart';
import 'package:janalytics_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

class JANALYTICSService extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<JANALYTICSService> create__() async {
    final int refId = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('ObjectFactory::createJANALYTICSService');
    final object = JANALYTICSService()..refId = refId..tag = 'janalytics_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  static Future<void> setupWithConfig(JANALYTICSLaunchConfig config) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: JANALYTICSService::setupWithConfig([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSService::setupWithConfig', {"config": config.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> startLogPageView(String pageName) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: JANALYTICSService::startLogPageView([\'pageName\':$pageName])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSService::startLogPageView', {"pageName": pageName});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> stopLogPageView(String pageName) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: JANALYTICSService::stopLogPageView([\'pageName\':$pageName])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSService::stopLogPageView', {"pageName": pageName});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setLatitudeLongitude(double latitude, double longitude) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: JANALYTICSService::setLatitude([\'latitude\':$latitude, \'longitude\':$longitude])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSService::setLatitudeLongitude', {"latitude": latitude, "longitude": longitude});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setLocation(CLLocation location) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: JANALYTICSService::setLocation([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSService::setLocation', {"location": location.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> eventRecord(JANALYTICSEventObject event) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: JANALYTICSService::eventRecord([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSService::eventRecord', {"event": event.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> identifyAccountWith(JANALYTICSUserInfo userInfo, void completion(int err, String msg)) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: JANALYTICSService::identifyAccount([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSService::identifyAccountWith', {"userInfo": userInfo.refId});
  
  
    // handle native call
    MethodChannel('JANALYTICSService::identifyAccountWith::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          // final refId = args['callerRefId'] as int;
          // if (refId != this.refId) return;
  
          switch (methodCall.method) {
            case 'Callback::void|NSInteger err, NSString msg::void|NSInteger err, NSString msg':
              // print log
              if (fluttifyLogEnabled) {
        
              }
        
              // handle the native call
              completion(args['err'], args['msg']);
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> detachAccount(void completion(int err, String msg)) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: JANALYTICSService::detachAccount([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSService::detachAccount', );
  
  
    // handle native call
    MethodChannel('JANALYTICSService::detachAccount::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          // final refId = args['callerRefId'] as int;
          // if (refId != this.refId) return;
  
          switch (methodCall.method) {
            case 'Callback::void|NSInteger err, NSString msg::void|NSInteger err, NSString msg':
              // print log
              if (fluttifyLogEnabled) {
        
              }
        
              // handle the native call
              completion(args['err'], args['msg']);
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setFrequency(int frequency) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: JANALYTICSService::setFrequency([\'frequency\':$frequency])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSService::setFrequency', {"frequency": frequency});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> crashLogON() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: JANALYTICSService::crashLogON([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSService::crashLogON', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setDebug(bool enable) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: JANALYTICSService::setDebug([\'enable\':$enable])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSService::setDebug', {"enable": enable});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}