// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:janalytics_fluttify/src/ios/ios.export.g.dart';
import 'package:janalytics_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class JANALYTICSCalculateEvent extends JANALYTICSEventObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<JANALYTICSCalculateEvent> create__() async {
    final int refId = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('ObjectFactory::createJANALYTICSCalculateEvent');
    final object = JANALYTICSCalculateEvent()..refId = refId..tag = 'janalytics_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<JANALYTICSCalculateEvent>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must has same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('ObjectFactory::create_batchJANALYTICSCalculateEvent', {'length': length});
  
    final List<JANALYTICSCalculateEvent> typedResult = resultBatch.map((result) => JANALYTICSCalculateEvent()..refId = result..tag = 'janalytics_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_eventID() async {
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSCalculateEvent::get_eventID", {'refId': refId});
  
    return result;
  }
  
  Future<double> get_value() async {
    final result = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSCalculateEvent::get_value", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_eventID(String eventID) async {
    await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSCalculateEvent::set_eventID', {'refId': refId, "eventID": eventID});
  
  
  }
  
  Future<void> set_value(double value) async {
    await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod('JANALYTICSCalculateEvent::set_value', {'refId': refId, "value": value});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension JANALYTICSCalculateEvent_Batch on List<JANALYTICSCalculateEvent> {
  //region getters
  Future<List<String>> get_eventID_batch() async {
    final resultBatch = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSCalculateEvent::get_eventID_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<double>> get_value_batch() async {
    final resultBatch = await MethodChannel('me.yohom/janalytics_fluttify').invokeMethod("JANALYTICSCalculateEvent::get_value_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  //endregion

  //region methods
  
  //endregion
}